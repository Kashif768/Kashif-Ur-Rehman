# -*- coding: utf-8 -*-
"""Loan_approvel_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wOl3fogt8dlHzpY7ggqg8h5aFSxAbQ7p
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

data=pd.read_csv('/content/Finance.csv')

data.head()

data.describe()

data.info()

data.isnull().sum()

"""**Handling missing value**"""

sns.countplot(x=data['Gender'])

data['Gender'].mode()[0]

data["Gender"]=data["Gender"].fillna(data['Gender'].mode()[0])

sns.countplot(x=data['Married'])

data["Married"].mode()[0]

data['Married']=data['Married'].fillna(data['Married'].mode()[0])

sns.countplot(x=data['Self_Employed'])

data['Self_Employed']=data['Self_Employed'].fillna(data['Self_Employed'].mode()[0])

sns.countplot(x=data['Dependents'])

data['Dependents']=data['Dependents'].fillna(data['Dependents'].mode()[0])

data['LoanAmount']=data['LoanAmount'].fillna(data['LoanAmount'].median())

data['Loan_Amount_Term']=data['Loan_Amount_Term'].fillna(data['Loan_Amount_Term'].median())

data['Credit_History']=data['Credit_History'].fillna(data['Credit_History'].median())

data.isnull().sum()

data.tail(10)

data.replace({
    'Gender': {'Male': 1, "Female": 0},
    'Married': {"Yes": 1, "No": 0},
    'Education': {'Graduate': 1, 'Not Graduate': 0},
    'Self_Employed': {'Yes': 1, 'No': 0},
    'Loan_Status': {'Y': 1, 'N': 0}
}, inplace=True)

"""**Train test spliting**"""

data.columns

import pandas as pd
from sklearn.model_selection import train_test_split

def prepare_data(data):
    y = data["Loan_Status"]
    x = data.drop(columns=["Loan_Status", "Loan_ID"], axis=1)
    x = pd.get_dummies(data=x, columns=['Property_Area', 'Dependents'])
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
    features = list(x.columns)
    return x_train, x_test, y_train, y_test, features

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, accuracy_score

# Train the model
model = RandomForestClassifier()
model.fit(x_train, y_train)

# Make predictions
Random_Forest_predict = model.predict(x_test)

# Compute the confusion matrix
Random_Forest_confusion = confusion_matrix(y_test, Random_Forest_predict)
print('Random Forest Confusion Matrix')
print(Random_Forest_confusion)

# Compute and print the accuracy score
print('Random Forest Accuracy Score')
Random_Forest_acc_score = accuracy_score(y_test, Random_Forest_predict)
print(Random_Forest_confusion)
print(Random_Forest_acc_score * 100)

importance = pd.DataFrame(model.feature_importances_)
importance['features'] = features
importance.columns = ['importance', 'features']
importance.sort_values(by='importance', ascending=False)

import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
sns.barplot(x='importance', y='features', data=importance)

rf_proba=model.predict_proba(x_test)
rf_predict=model.predict(x_test)
print(rf_proba[0:10])
print(rf_predict)

